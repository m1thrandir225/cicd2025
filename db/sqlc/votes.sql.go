// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: votes.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createVote = `-- name: CreateVote :one
INSERT INTO votes(
    option_id,
    user_id,
    ip_address,
    user_agent
)
VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, option_id, user_id, voted_at, ip_address, user_agent
`

type CreateVoteParams struct {
	OptionID  uuid.UUID `json:"option_id"`
	UserID    uuid.UUID `json:"user_id"`
	IpAddress string    `json:"ip_address"`
	UserAgent string    `json:"user_agent"`
}

func (q *Queries) CreateVote(ctx context.Context, arg CreateVoteParams) (Vote, error) {
	row := q.db.QueryRow(ctx, createVote,
		arg.OptionID,
		arg.UserID,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.UserID,
		&i.VotedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const deleteVote = `-- name: DeleteVote :one
DELETE FROM votes
WHERE id=$1
RETURNING id, option_id, user_id, voted_at, ip_address, user_agent
`

func (q *Queries) DeleteVote(ctx context.Context, id uuid.UUID) (Vote, error) {
	row := q.db.QueryRow(ctx, deleteVote, id)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.UserID,
		&i.VotedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const getVote = `-- name: GetVote :one
SELECT id, option_id, user_id, voted_at, ip_address, user_agent
FROM votes
WHERE id=$1
LIMIT 1
`

func (q *Queries) GetVote(ctx context.Context, id uuid.UUID) (Vote, error) {
	row := q.db.QueryRow(ctx, getVote, id)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.UserID,
		&i.VotedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}

const updateVoteOption = `-- name: UpdateVoteOption :one
UPDATE votes
SET option_id=$2
WHERE id=$1
RETURNING id, option_id, user_id, voted_at, ip_address, user_agent
`

type UpdateVoteOptionParams struct {
	ID       uuid.UUID `json:"id"`
	OptionID uuid.UUID `json:"option_id"`
}

func (q *Queries) UpdateVoteOption(ctx context.Context, arg UpdateVoteOptionParams) (Vote, error) {
	row := q.db.QueryRow(ctx, updateVoteOption, arg.ID, arg.OptionID)
	var i Vote
	err := row.Scan(
		&i.ID,
		&i.OptionID,
		&i.UserID,
		&i.VotedAt,
		&i.IpAddress,
		&i.UserAgent,
	)
	return i, err
}
