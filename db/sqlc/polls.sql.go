// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: polls.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPoll = `-- name: CreatePoll :one
INSERT INTO polls(
    description,
    created_by
)
VALUES (
    $1,
    $2
) RETURNING id, description, created_by, is_active, created_at
`

type CreatePollParams struct {
	Description string    `json:"description"`
	CreatedBy   uuid.UUID `json:"created_by"`
}

type CreatePollRow struct {
	ID          uuid.UUID `json:"id"`
	Description string    `json:"description"`
	CreatedBy   uuid.UUID `json:"created_by"`
	IsActive    bool      `json:"is_active"`
	CreatedAt   time.Time `json:"created_at"`
}

func (q *Queries) CreatePoll(ctx context.Context, arg CreatePollParams) (CreatePollRow, error) {
	row := q.db.QueryRow(ctx, createPoll, arg.Description, arg.CreatedBy)
	var i CreatePollRow
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.CreatedBy,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const disablePoll = `-- name: DisablePoll :one
UPDATE polls
SET is_active=$2
WHERE id = $1
RETURNING id, description, is_active, created_by, created_at, updated_at
`

type DisablePollParams struct {
	ID       uuid.UUID `json:"id"`
	IsActive bool      `json:"is_active"`
}

func (q *Queries) DisablePoll(ctx context.Context, arg DisablePollParams) (Poll, error) {
	row := q.db.QueryRow(ctx, disablePoll, arg.ID, arg.IsActive)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.IsActive,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
