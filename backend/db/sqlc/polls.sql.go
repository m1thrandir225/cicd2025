// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: polls.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPoll = `-- name: CreatePoll :one
INSERT INTO polls(
    description,
    created_by,
    active_until
)
VALUES (
    $1,
    $2,
    $3
) RETURNING id, description, active_until, created_by, created_at, updated_at
`

type CreatePollParams struct {
	Description string    `json:"description"`
	CreatedBy   uuid.UUID `json:"created_by"`
	ActiveUntil time.Time `json:"active_until"`
}

func (q *Queries) CreatePoll(ctx context.Context, arg CreatePollParams) (Poll, error) {
	row := q.db.QueryRow(ctx, createPoll, arg.Description, arg.CreatedBy, arg.ActiveUntil)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ActiveUntil,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePoll = `-- name: DeletePoll :one
DELETE FROM polls
WHERE id = $1
RETURNING  id, description, active_until, created_by, created_at, updated_at
`

func (q *Queries) DeletePoll(ctx context.Context, id uuid.UUID) (Poll, error) {
	row := q.db.QueryRow(ctx, deletePoll, id)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ActiveUntil,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPoll = `-- name: GetPoll :one
SELECT id, description, active_until, created_by, created_at, updated_at FROM polls
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetPoll(ctx context.Context, id uuid.UUID) (Poll, error) {
	row := q.db.QueryRow(ctx, getPoll, id)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ActiveUntil,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPolls = `-- name: GetPolls :many
SELECT id, description, active_until, created_by, created_at, updated_at FROM polls
WHERE created_by = $1
`

func (q *Queries) GetPolls(ctx context.Context, createdBy uuid.UUID) ([]Poll, error) {
	rows, err := q.db.Query(ctx, getPolls, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Poll{}
	for rows.Next() {
		var i Poll
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.ActiveUntil,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isPollActive = `-- name: IsPollActive :one
SELECT id, description, active_until, created_by, created_at, updated_at FROM polls as p 
WHERE p.active_until > now() AND p.id = $1
LIMIT 1
`

func (q *Queries) IsPollActive(ctx context.Context, id uuid.UUID) (Poll, error) {
	row := q.db.QueryRow(ctx, isPollActive, id)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ActiveUntil,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePoll = `-- name: UpdatePoll :one
UPDATE polls
SET description=$2, active_until=$3
WHERE id = $1
RETURNING  id, description, active_until, created_by, created_at, updated_at
`

type UpdatePollParams struct {
	ID          uuid.UUID `json:"id"`
	Description string    `json:"description"`
	ActiveUntil time.Time `json:"active_until"`
}

func (q *Queries) UpdatePoll(ctx context.Context, arg UpdatePollParams) (Poll, error) {
	row := q.db.QueryRow(ctx, updatePoll, arg.ID, arg.Description, arg.ActiveUntil)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ActiveUntil,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updatePollStatus = `-- name: UpdatePollStatus :one
UPDATE polls
SET active_until=$2
WHERE id = $1
RETURNING id, description, active_until, created_by, created_at, updated_at
`

type UpdatePollStatusParams struct {
	ID          uuid.UUID `json:"id"`
	ActiveUntil time.Time `json:"active_until"`
}

func (q *Queries) UpdatePollStatus(ctx context.Context, arg UpdatePollStatusParams) (Poll, error) {
	row := q.db.QueryRow(ctx, updatePollStatus, arg.ID, arg.ActiveUntil)
	var i Poll
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.ActiveUntil,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
